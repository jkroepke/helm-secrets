---
name: CI

env:
  VERSION_HELM: v3.7.0
  VERSION_SOPS: v3.7.1
  VERSION_VALS: v0.14.0

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Run the sh-checker
        uses: luizm/action-sh-checker@v0.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHELLCHECK_OPTS: -x
        with:
          sh_checker_comment: true
          sh_checker_exclude: "tests"
          sh_checker_checkbashisms_enable: true

  unit-tests:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        container: [""]
        shell: [dash]
        include:
          - os: windows-latest
            shell: bash
          - os: windows-latest
            shell: cygwin
          - os: windows-latest
            shell: wsl
          - os: macos-latest
            shell: bash 3.2
          - os: macos-latest
            shell: bash 3.2 with coreutils
          - os: ubuntu-latest
            container: alpine
            shell: ash
          - os: ubuntu-latest
            container: centos:7
            shell: bash 4.2
          - os: ubuntu-latest
            container: alpine
            shell: zsh
          - os: ubuntu-latest
            container: registry.access.redhat.com/ubi8/ubi-minimal
            shell: bash
    steps:
      - name: Install dependencies
        if: "matrix.container"
        run: |-
          if command -v apk > /dev/null; then
            apk add --no-cache bash git gnupg gettext
          elif command -v apt-get > /dev/null; then
            apt-get update -qqy
            apt-get install -qqy git-core unzip gnupg
          elif command -v yum > /dev/null; then
            if [ "$(rpm -E %{rhel})" == "7" ]; then
              yum-config-manager --add-repo='https://download.copr.fedorainfracloud.org/results/jkroepke/git/epel-$releasever-x86_64/'
              rpm --import https://download.copr.fedorainfracloud.org/results/jkroepke/git/pubkey.gpg
            fi
            yum install -y git-core unzip gettext
          elif command -v microdnf > /dev/null; then
            microdnf install --nodocs --noplugins git-core unzip gettext tar findutils diffutils
          fi

      - name: Install zsh
        if: "contains(matrix.shell, 'zsh')"
        run: apk add zsh && ln -sf "$(command -v zsh)" /bin/sh

      - name: Disable autocrlf
        run: |-
          git config --global core.autocrlf false
          git config --global core.eol lf
        if: "contains(matrix.os, 'windows-latest')"

      - uses: actions/checkout@v2.4.0
        with:
          submodules: true

      - name: Setup Helm
        uses: azure/setup-helm@v2.0
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1
        with:
          version: ${{ env.VERSION_SOPS }}

      - name: Setup Vault
        uses: innovationnorway/setup-vault@v1.0.3

      - name: Setup vals
        uses: jkroepke/setup-vals@v1
        if: "!contains(matrix.os, 'windows-latest')"
        with:
          version: ${{ env.VERSION_VALS }}

      - name: Setup Cygwin
        if: "contains(matrix.shell, 'cygwin')"
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x64
          packages: gnupg2

      - name: Setup WSL
        if: "contains(matrix.shell, 'wsl')"
        uses: Vampire/setup-wsl@v1

      - name: Setup coreutils
        if: "contains(matrix.shell, 'coreutils')"
        run: |-
          brew install coreutils
          echo "/usr/local/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH

      - name: Print Environment
        run: |-
          bash -c 'echo "Shell: $(readlink /bin/sh || readlink /var/select/sh || echo unknown)"'
          bash tests/bats/core/bin/bats -v
          sops --version
          gpg --version
          vault --version

      - name: Run helm-secrets w/o bats
        run: |-
          helm plugin install "${{ github.event_name == 'pull_request'
            && format('{0}/{1}', github.server_url, github.event.pull_request.head.repo.full_name)
            || format('{0}/{1}', github.server_url, github.repository)
          }}" --version "${{ github.event_name == 'pull_request'
            && github.head_ref
            || github.ref
          }}"
          helm secrets -v
      - name: HELM_SECRETS_DRIVER=sops bats --tap -r tests/unit
        if: "!contains(matrix.os, 'windows-latest')"
        run: bash tests/bats/core/bin/bats --timing --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: sops

      - name: HELM_SECRETS_DRIVER=vault bats --tap -r tests/unit
        if: "!contains(matrix.os, 'windows-latest')"
        run: |
          vault server -dev -dev-root-token-id=test &>/dev/null &
          bash tests/bats/core/bin/bats --timing --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: vault
          VAULT_ADDR: 'http://127.0.0.1:8200'

      - name: HELM_SECRETS_DRIVER=envsubst bats --tap -r tests/unit
        if: "!contains(matrix.os, 'windows-latest')"
        run: bash tests/bats/core/bin/bats --timing --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: envsubst

      - name: HELM_SECRETS_DRIVER=vals bats --tap -r tests/unit
        if: "!contains(matrix.os, 'windows-latest')"
        run: bash tests/bats/core/bin/bats --timing --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: vals

      - name: HELM_SECRETS_DRIVER=sops bats --tap -r tests/unit (on windows)
        if: "contains(matrix.os, 'windows-latest')"
        run: |
          $env:W_TEMP=$env:TEMP;${{ contains(matrix.shell, 'wsl') && 'wsl' || '' }} bash tests/bats/core/bin/bats --timing --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: sops

  coverage:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    env:
      BATSLIB_TEMP_PRESERVE: "0"
      BATSLIB_TEMP_PRESERVE_ON_FAILURE: "0"
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Ruby 2.6
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Setup Helm
        uses: azure/setup-helm@v2.0
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1
        with:
          version: ${{ env.VERSION_SOPS }}

      - name: Setup vals
        uses: jkroepke/setup-vals@v1
        with:
          version: ${{ env.VERSION_VALS }}

      - name: Setup Vault
        uses: innovationnorway/setup-vault@v1.0.3

      - name: Install bashcov
        run: gem install bashcov:'< 2' simplecov-cobertura:'< 2'

      - name: Print Environment
        run: |-
          bash -c 'echo "Shell: $(readlink /bin/sh || readlink /var/select/sh)"'
          bash tests/bats/core/bin/bats -v
          sops --version
          gpg --version
          vault --version

      - name: Prepare bashcov
        run: grep -rl 'env sh' scripts | xargs sed -i 's/env sh/env bash/'

      - name: bashcov bats --tap -r tests/unit
        run: bashcov -- tests/bats/core/bin/bats --tap -r tests/unit
        env:
          BASHCOV_COMMAND_NAME: helm-secrets:sops

      - name: bashcov bats --tap -r tests/unit
        run: |
          vault server -dev -dev-root-token-id=test &>/dev/null &
          bashcov -- tests/bats/core/bin/bats --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: vault
          BASHCOV_COMMAND_NAME: helm-secrets:vault

      - name: bashcov bats --tap -r tests/unit
        run: bashcov -- tests/bats/core/bin/bats --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: envsubst
          BASHCOV_COMMAND_NAME: helm-secrets:envsubst

      - name: bashcov bats --tap -r tests/unit
        run: bashcov -- tests/bats/core/bin/bats --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: vals
          BASHCOV_COMMAND_NAME: helm-secrets:vals

      - uses: codecov/codecov-action@v2.1.0
        with:
          files: ./coverage/coverage.xml
          fail_ci_if_error: true

      - run: rm -rf ./coverage/

      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.11.1"

      - name: bashcov bats --tap -r tests/it
        run: bashcov -- tests/bats/core/bin/bats --tap -r tests/it
        env:
          BASHCOV_COMMAND_NAME: helm-secrets:it

      - uses: codecov/codecov-action@v2.1.0
        with:
          files: ./coverage/coverage.xml
          fail_ci_if_error: true

  integration-tests:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.11.1"

      - run: kubectl cluster-info

      - uses: actions/checkout@v2.4.0
        with:
          submodules: true

      - name: Setup Helm
        uses: azure/setup-helm@v2.0
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1
        with:
          version: ${{ env.VERSION_SOPS }}

      - name: Setup vals
        uses: jkroepke/setup-vals@v1
        with:
          version: ${{ env.VERSION_VALS }}

      - name: Setup Vault
        uses: innovationnorway/setup-vault@v1.0.3

      - name: Print Environment
        run: |-
          echo "Shell: $(readlink /bin/sh || readlink /var/select/sh)"
          bash tests/bats/core/bin/bats -v
          sops --version
          gpg --version
          vault --version

      - name: helm plugin install
        run: helm plugin install .

      - run: tests/bats/core/bin/bats --tap -r tests/it
