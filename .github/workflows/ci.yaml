---
name: CI

env:
  VERSION_HELM: v3.5.0
  VERSION_SOPS: v3.7.0

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: actions/checkout@v2
      - name: Run the sh-checker
        uses: luizm/action-sh-checker@v0.1.13
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHELLCHECK_OPTS: -x
        with:
          sh_checker_comment: true
          sh_checker_exclude: "tests"
          sh_checker_checkbashisms_enable: true

  unit-tests:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        container: [~]
        shell: [dash]
        include:
          - os: windows-latest
            shell: bash
          - os: macos-latest
            shell: bash 3.2
          - os: macos-latest
            shell: bash 3.2 with coreutils
          - os: ubuntu-latest
            container: alpine
            shell: ash
          - os: ubuntu-latest
            container: centos:7
            shell: bash 4.2
          - os: ubuntu-latest
            container: alpine
            shell: zsh
    steps:
      - name: Install git
        if: "matrix.container"
        run: |-
          if command -v apk > /dev/null; then
            apk add --no-cache bash git gnupg
          elif command -v apt-get > /dev/null; then
            apt-get update -qqy
            apt-get install -qqy git-core unzip gnupg
          elif command -v yum > /dev/null; then
            if [ "$(rpm -E %{rhel})" == "7" ]; then
              yum-config-manager --add-repo='https://download.copr.fedorainfracloud.org/results/jkroepke/git/epel-$releasever-x86_64/'
              rpm --import https://download.copr.fedorainfracloud.org/results/jkroepke/git/pubkey.gpg
            fi

            yum install -y git-core unzip
          fi

      - name: Install zsh
        if: "contains(matrix.shell, 'zsh')"
        run: apk add zsh && ln -sf "$(command -v zsh)" /bin/sh

      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Helm
        uses: azure/setup-helm@v1.1
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1
        with:
          version: ${{ env.VERSION_SOPS }}

      - name: Setup Vault
        uses: innovationnorway/setup-vault@v1

      - name: Setup coreutils
        if: "contains(matrix.shell, 'coreutils')"
        run: |-
          brew install coreutils
          echo "/usr/local/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH

      - name: Print Environment
        run: |-
          bash -c 'echo "Shell: $(readlink /bin/sh || readlink /var/select/sh || echo unknown)"'
          bash tests/bats/core/bin/bats -v
          sops --version
          gpg --version
          vault --version

      - name: HELM_SECRETS_DRIVER=sops bats --tap -r tests/unit
        if: "!contains(matrix.os, 'windows-latest')"
        run: |
          tests/bats/core/bin/bats --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: sops

      - name: HELM_SECRETS_DRIVER=vault bats --tap -r tests/unit
        if: "!contains(matrix.os, 'windows-latest')"
        run: |
          vault server -dev -dev-root-token-id=test &>/dev/null &
          tests/bats/core/bin/bats --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: vault
          VAULT_ADDR: 'http://127.0.0.1:8200'

      - name: HELM_SECRETS_DRIVER=sops bats --tap -r tests/unit (on windows)
        if: "contains(matrix.os, 'windows-latest')"
        run: |
          $env:W_TEMP=$env:TEMP; bash tests/bats/core/bin/bats --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: sops

  coverage:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Setup Helm
        uses: azure/setup-helm@v1.1
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1
        with:
          version: ${{ env.VERSION_SOPS }}

      - name: Setup Vault
        uses: innovationnorway/setup-vault@v1

      - name: Install bashcov
        run: gem install bashcov simplecov-cobertura

      - name: Print Environment
        run: |-
          bash -c 'echo "Shell: $(readlink /bin/sh || readlink /var/select/sh)"'
          bash tests/bats/core/bin/bats -v
          sops --version
          gpg --version
          vault --version

      - name: Prepare bashcov
        run: grep -rl 'env sh' scripts | xargs sed -i 's/env sh/env bash/'

      - name: bashcov bats --tap -r tests/unit
        run: bashcov -- tests/bats/core/bin/bats --tap -r tests/unit
        env:
          BASHCOV_COMMAND_NAME: helm-secrets sops
          BATSLIB_TEMP_PRESERVE: "0"
          BATSLIB_TEMP_PRESERVE_ON_FAILURE: "0"

      - name: bashcov bats --tap -r tests/unit
        run: |
          vault server -dev -dev-root-token-id=test &>/dev/null &
          bashcov -- tests/bats/core/bin/bats --tap -r tests/unit
        env:
          HELM_SECRETS_DRIVER: vault
          BASHCOV_COMMAND_NAME: helm-secrets vault
          BATSLIB_TEMP_PRESERVE: "0"
          BATSLIB_TEMP_PRESERVE_ON_FAILURE: "0"

      - uses: codecov/codecov-action@v1
        with:
          directory: coverage
          fail_ci_if_error: true

  integration-tests:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.9.0"

      - run: kubectl cluster-info

      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Helm
        uses: azure/setup-helm@v1.1
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1
        with:
          version: ${{ env.VERSION_SOPS }}

      - name: Setup Vault
        uses: innovationnorway/setup-vault@v1

      - name: Print Environment
        run: |-
          echo "Shell: $(readlink /bin/sh || readlink /var/select/sh)"
          tests/bats/core/bin/bats -v
          sops --version
          gpg --version
          vault --version

      - name: helm plugin install
        run: helm plugin install .

      - run: tests/bats/core/bin/bats --tap -r tests/it
